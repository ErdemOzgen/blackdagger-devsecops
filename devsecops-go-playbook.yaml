params: scan_directory=CHANGEME output_directory=CHANGEME
steps:
  - name: Secret Scan with detect-secrets
    command: detect-secrets -C ${scan_directory} scan
    stdout: ${output_directory}/secrets.json
  - name: Vulnerability Scan with Gosec
    dir: $scan_directory
    command: gosec -no-fail ./...
    stdout: ${output_directory}/gosec.txt
  - name: Vulnerability Scan with Grype
    command: sudo grype dir:${scan_directory} -o json --file ${output_directory}/grype.json
    depends:
    - Vulnerability Scan with Gosec
  - name: Dependency Check with Govulncheck
    dir: $scan_directory
    command: bash
    script: govulncheck -show verbose ./... || true
  - name: Dependency Scan with OWASP Dependency Check
    command: dependency-check/bin/dependency-check.sh --scan \"${scan_directory}\" --out ${output_directory}
    depends:
    - Dependency Scan with Govulncheck
  - name: SBOM Generation With Syft
    command: syft ${scan_directory} --output cyclonedx-json 
    stdout: ${output_directory}/sbom.json
    depends:
    - Dependency Scan with OWASP Dependency Check

  # This step requires a configured instance of SonarQube with a desired project.
  # 
  # After the configuration on SonarQube, you must add the required parameters below to perform your scan.
  # Also, you must use a SonarScanner CLI instance. Command below will run the container image of the instance.
  # This step and its commands are specified for Python projects.
  # You can see the scan results on SonarQube UI.
  - name: SAST Scan with SonarQube
    command: bash
    run: devsecops-atomic-sonarqube-other.yaml
    params: scan_directory=${scan_directory//\"} token=CHANGEME project_key=CHANGEME url=http://localhost:9000
    depends: 
    - SBOM Generation With Syft
