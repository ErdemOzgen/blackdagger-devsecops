params: scan_directory=CHANGEME output_directory=CHANGEME
steps:
  - name: Secret Scan with detect-secrets
    command: detect-secrets -C ${scan_directory} scan
    stdout: ${output_directory}/secrets.json

  - name: Vulnerability Scan with Grype
    command: sudo grype dir:${scan_directory} -o json --file ${output_directory}/grype.json
    depends:
    - Secret Scan with detect-secrets

  - name: Vulnerability Scan with JSHint
    command: bash
    script: jshint ${scan_directory} || exit 0
    stdout: ${output_directory}/jshint.txt
    depends:
    - Vulnerability Scan with Grype

  - name: Dependency Scan with Retire.js
    command: retire --path ${scan_directory} --outputformat json --outputpath ${output_directory}/retire.js --exitwith 0
    depends:
    - Vulnerability Scan with JSHint

  - name: Dependency Scan with OWASP Dependency Check
    command: dependency-check/bin/dependency-check.sh --scan \"${scan_directory}\" --out ${output_directory}
    depends:
    - Dependency Scan with Retire.js

  - name: "SBOM Generation With Syft"
    command: syft ${scan_directory} --output cyclonedx-json
    stdout: ${output_directory}/sbom.json
    depends:
    - Dependency Scan with OWASP Dependency Check

  # This step requires a configured instance of SonarQube with a desired project.
  # 
  # After the configuration on SonarQube, you must add the required parameters below to perform your scan.
  # Also, you must use a SonarScanner CLI instance. Command below will run the container image of the instance.
  # You can see the scan results on SonarQube UI.
  - name: "SAST Scan with SonarQube"
    command: bash
    script: |
      docker run \
      --rm \
      --network=host \
      -e SONAR_HOST_URL="http://localhost:9000" \
      -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=js" \
      -e SONAR_TOKEN="sqp_31d3b30e1d7074b8d1951d315651edf8b6cb4047" \
      -v "${scan_directory//\"}:/usr/src" \
      sonarsource/sonar-scanner-cli
    depends:
    - SBOM Generation With Syft
