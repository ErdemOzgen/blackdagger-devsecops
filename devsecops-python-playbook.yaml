params: scan_directory=CHANGEME output_directory=CHANGEME
steps:
  - name: Secret Scan with detect-secrets
    command: detect-secrets -C ${scan_directory} scan
    stdout: ${output_directory}/secrets.json

  - name: Vulnerability Scan with Bandit
    command: bandit --exit-zero -r ${scan_directory} -f json -o ${output_directory}/bandit_result.json
    depends:
    - Secret Scan with detect-secrets

  - name: Vulnerability Scan with Grype
    command: sudo grype dir:${scan_directory} -o json --file ${output_directory}/grype.json
    depends:
    - Vulnerability Scan with Bandit

  - name: Dependency Scan with Safety
    command: safety check --continue-on-error --save-json ${output_directory}/safety.json
    depends:
    - Vulnerability Scan with Grype

  - name: Dependency Scan with OWASP Dependency Check
    command: dependency-check/bin/dependency-check.sh --scan \"${scan_directory}\" --out ${output_directory}
    depends:
    - Dependency Scan with Safety

  - name: SBOM Generation With Syft
    command: syft ${scan_directory} --output cyclonedx-json 
    stdout: ${output_directory}/sbom.json
    depends:
    - Dependency Scan with OWASP Dependency Check

  # This step requires a configured instance of SonarQube with a desired project.
  # 
  # After the configuration on SonarQube, you must add the required parameters below to perform your scan.
  # Also, you must use a SonarScanner CLI instance. Command below will run the container image of the instance.
  # This step and its commands are specified for Python projects.
  # You can see the scan results on SonarQube UI.
  - name: SAST Scan with SonarQube
    command: bash
    script: |
      docker run \
      --rm \
      --network=host \
      -e SONAR_HOST_URL="http://localhost:9000" \
      -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=python" \
      -e SONAR_TOKEN="sqp_f48949e4689b0dece50d97eb117a44eb600c925a" \
      -v "${scan_directory//\"}:/usr/src" \
      sonarsource/sonar-scanner-cli
    depends: 
    - SBOM Generation With Syft
